#!/bin/bash -e

#
# Launch Sysbox (requires root privileges)
#
# Note: normally Sysbox is installed via a distro-specific package
# which sets up the Sysbox systemd units. This script is meant as a
# quick alternative to the installer to help launch Sysbox manually
# (e.g. for development & testing).
#
# Type "sudo ./sysbox --help". for usage info.

PROGNAME=$(basename $0)
VERBOSE=1
TEST_MODE=0
DEBUG_MODE=0

# Max number of user-namespaces to configure in distros supporting this knob.
SYSBOX_MAX_USER_NS=10000

# Retry a command $1 times until it succeeds. Wait $2 seconds between retries.
# (copied from runc/tests/integration/helpers.bash)
function retry() {
  local attempts=$1
  shift
  local delay=$1
  shift
  local i

  for ((i = 0; i < attempts; i++)); do
    $@
    if [ "$?" -eq 0 ]; then
	return 0
    fi
    sleep $delay
  done

  echo "Command \"$@\" failed $attempts times. Output: $?"
  false
}

# Ensure that kernel-modules expected by system-level apps (running within sys
# containers) are properly loaded.
function load_required_modules() {

  # Sysbox requires 'configfs' module to ensure proper operation of containerized
  # apps requiring access to kernel's config file (e.g. kubeadm).
  if ! modprobe configfs &> /dev/null; then
      echo "Could not load configfs kernel module. Exiting ..."
      return 1
  fi

  return 0
}

# Returns linux distro running in the system.
function get_host_distro() {
  local distro=$(cat /etc/os-release | awk -F"=" '/^ID=/ {print $2}' | tr -d '"')
  echo $distro
}

# Ensures user "sysbox" is present on the host
function setup_sysbox_user() {
   local exit_code=0
   grep -q "^sysbox:" /etc/passwd || exit_code=$?
   if (( $exit_code == 1 )); then
      useradd -r -s /usr/sbin/nologin sysbox
   fi
}

# Ensures unprivileged user-ns's are allowed.
function setup_userns() {

  local distro=$1

  if [[ "${distro}" == "ubuntu" ]] ||
     [[ "${distro}" == "debian" ]]; then
      echo "1" > /proc/sys/kernel/unprivileged_userns_clone

  elif [[ "${distro}" == "centos" ]] ||
       [[ "${distro}" == "fedora" ]]; then

      # Setting user-ns max value.
      max_user_ns=$(</proc/sys/user/max_user_namespaces)
      if [[ $max_user_ns =~ ^[0-9]+$ ]] && [[ $max_user_ns -lt $SYSBOX_MAX_USER_NS ]]; then
	  echo $SYSBOX_MAX_USER_NS > /proc/sys/user/max_user_namespaces
      fi

  else
      echo "Unsupported Linux distribution: $distro. Sysbox may not opperate as expected."
  fi
}

# Identifies kernel-header's expected path based on distro.
function kernel_header_path() {

  local distro=$1
  local path

  if [[ "${distro}" == "centos" ]] ||
     [[ "${distro}" == "fedora" ]] ||
     [[ "${distro}" == "redhat" ]]; then
      path="/usr/src/kernels/$(uname -r)"
  else
      path="/usr/src/linux-headers-$(uname -r)"
  fi

  echo "$path"
}

# Verifies that a kernel configuration file is found, and if that's not the case,
# copy it from the original "/boot" folder. Notice that this may not work when
# running sysbox within a test-priv container, as "/boot" folder may not be around;
# in those cases initialization will proceed as normal and a log will be dumped to
# alert the user.
function setup_kernel_config() {

  local distro=$1

  local kernel_path=$(kernel_header_path $distro)

  if [[ ! -f "${kernel_path}"/.config ]]; then
      # Attempt to find kernel config in /boot path.
      if [[ -d /boot ]] && [[ -f /boot/config-$(uname -r) ]]; then
	  cp /boot/config-$(uname -r) "${kernel_path}"/.config
	  return
      fi

      echo -e "\nUnable to find a kernel config file. This may affect some system" \
	   "level apps running within sys-containers. As a solution, identify your" \
	   "kernel config file in the host (typically: \"/boot/config-$(uname -r)\")" \
	   "and copy it into your distro's expected kernel-headers path" \
	   "(usually: \"$(kernel_header_path $distro)\").\n"
  fi
}

# Increases system-level resources to satisfy Sysbox requirements.
function setup_maxs() {

  # Increase default inotify resources to meet sys container's demands.
  sysctl -w fs.inotify.max_queued_events=1048576 &> /dev/null
  sysctl -w fs.inotify.max_user_watches=1048576 &> /dev/null
  sysctl -w fs.inotify.max_user_instances=1048576 &> /dev/null

  # Increase default keyring resources to meet sys container demands.
  # For a k8s cluster:
  # keys = 35 + (workers * 23) + (2 * pods)
  # maxbytes = 20 bytes * maxkeys
  sysctl -w kernel.keys.maxkeys=20000 &> /dev/null
  sysctl -w kernel.keys.maxbytes=$((20*20000)) &> /dev/null
}

# Completes Sysbox's setup process.
function sysbox_setup() {

  local distro=$(get_host_distro)

  if ! load_required_modules; then
      exit 1
  fi

  setup_sysbox_user
  setup_userns $distro
  setup_kernel_config $distro
  setup_maxs
}

# Stop all Sysbox components.
function sysbox_stop() {

  sysmgr_pids=$(pidof sysbox-mgr) || true
  sysfs_pids=$(pidof sysbox-fs) || true

  for pid in $sysmgr_pids; do
	  [[ $VERBOSE ]] && printf "Stopping sysbox-mgr\n"
    kill $pid
  done

  for pid in $sysfs_pids; do
	  [[ $VERBOSE ]] && printf "Stopping sysbox-fs\n"
    kill $pid
  done
}

function sysbox_mgr_start() {

  [[ $VERBOSE ]] && printf "Starting sysbox-mgr\n"

  declare -a mgr_options=("--log /var/log/sysbox-mgr.log")

  if [ $DEBUG_MODE -eq 1 ]; then
	  mgr_options+=("--log-level=debug")
  fi

  sysbox-mgr ${mgr_options[@]} &
  sleep 1
  res=$(retry 10 1 grep -q Ready /var/log/sysbox-mgr.log)
  if [ $? -ne 0 ]; then
    printf "\nsysbox-mgr failed to start. Here is the log file:\n"
    cat /var/log/sysbox-mgr.log
    exit 1
  fi
}

function sysbox_fs_start() {

  mkdir -p /var/lib/sysboxfs

  declare -a fs_options=("--log /var/log/sysbox-fs.log")

  if [ $TEST_MODE -eq 1 ]; then
	  fs_options+=("--ignore-handler-errors")
  fi

  if [ $DEBUG_MODE -eq 1 ]; then
	  fs_options+=("--log-level=debug")
  fi

  [[ $VERBOSE ]] && printf "Starting sysbox-fs\n"

  sysbox-fs ${fs_options[@]} &

  sleep 1
  res=$(retry 10 1 grep -q Initiating /var/log/sysbox-fs.log)
  if [ $? -ne 0 ]; then
    printf "\nsysbox-fs failed to start. Here is the log file:\n"
    cat /var/log/sysbox-fs.log
    exit 1
  fi

}

function sysbox_start() {

	# Note: sysbox-runc is started by the higher level container manager (e.g.,
	# Docker, containerd)

	sysbox_mgr_start
	sysbox_fs_start
}

function show_usage() {
	printf "\n"
	printf "Usage: $PROGNAME [OPTIONS]\n"
	printf "\n"
	printf "Starts Sysbox without using the Sysbox systemd service units.\n"
	printf "Useful when building Sysbox from source and for testing. Must run as root.\n"
	printf "\n"
	printf "Options:\n"
	printf "  -t, --test-mode   Configures Sysbox in test mode (for use in the Sysbox test suite only).\n"
	printf "  -d, --debug       Enables debug logging in Sysbox (useful for debugging).\n"
	printf "  -h, --help        Display usage.\n"
	printf "\n"
}

function parse_args() {
  options=$(getopt -o tdh -l test-mode,debug,help -- "$@")

  eval set -- "$options"

  while true; do
    case "$1" in
      -h | --help)
        show_usage
		  exit 1
        ;;
      -t | --test-mode)
        TEST_MODE=1
        ;;
      -d | --debug)
        DEBUG_MODE=1
        ;;
      --)
        shift
        break
        ;;
      -*)
        show_usage
		  exit 1
        ;;
      *)
        show_usage
		  exit 1
        ;;
    esac
    shift
  done

  [[ "$1" == "" ]] || {
    show_usage
    exit 1
  }

}

function main() {

  parse_args "$@"

  if [ "$EUID" -ne 0 ]; then
     echo "Please run as root."
     exit
  fi

  sysbox_stop
  sysbox_setup
  sysbox_start

  [[ $VERBOSE ]] && printf "Done.\n"
}

main "$@"
