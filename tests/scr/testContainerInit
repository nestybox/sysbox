#!/bin/bash -e

#
# Test container initialization script
#

function retry() {
  local attempts=$1
  shift
  local delay=$1
  shift
  local i

  set +e
  for ((i = 0; i < attempts; i++)); do
    $@
    if [ "$?" -eq 0 ]; then
      set -e
      return 0
    fi
    sleep $delay
  done

  set -e
  echo "Command \"$@\" failed $attempts times. Output: $?"
  false
}

#
# Execution starts here ...
#

# Build & install sysbox
thisHost=$(hostname)

# Build cookie (to build from scratch when necessary only)
if [[ ! -f .buildinfo ]]; then
  touch .buildinfo
  chown rootless:rootless .buildinfo
fi

lastBuildHost=$(cat .buildinfo)
if [[ "$lastBuildHost" != "$thisHost" ]]; then
  make clean
fi

make sysbox --no-print-directory && make install

# Configure dockerd
mkdir -p /etc/docker

if [ -z "$SHIFT_UIDS" ]; then
    cat <<EOF > /etc/docker/daemon.json
{
    "debug": false,
    "userns-remap": "sysbox",
    "runtimes": {
        "sysbox-runc": {
            "path": "/usr/local/sbin/sysbox-runc"
        }
    },
    "default-runtime": "sysbox-runc"
}
EOF
else
    cat <<EOF > /etc/docker/daemon.json
{
    "debug": false,
    "userns-remap": "",
    "runtimes": {
        "sysbox-runc": {
            "path": "/usr/local/sbin/sysbox-runc",
            "runtimeArgs": [
                "--no-kernel-check"
            ]
        }
    },
    "default-runtime": "sysbox-runc"
}
EOF
fi

# Start docker
dockerd > /var/log/dockerd.log 2>&1 &
retry 10 0.5 docker ps > /dev/null 2>&1

# Inside the test container we start sysbox with a dedicated script
# that sets some test-specific configs
echo "Starting sysbox with test-specific options"
install -D -m0755 tests/scr/sysbox /usr/local/sbin/sysbox
sysbox
