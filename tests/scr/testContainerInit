#!/bin/bash -e

#
# Test container initialization script
#


# Dockerd default configuration dir/file.
dockerCfgDir="/etc/docker"
dockerCfgFile="${dockerCfgDir}/daemon.json"

# Default mtu value associated to test-container's egress-interface.
export default_mtu=1500

# Temp file for jq write operations.
tmpfile=$(mktemp /tmp/init-scr.XXXXXX)
trap 'rm -f "${tmpfile}"' EXIT


function retry() {
  local attempts=$1
  shift
  local delay=$1
  shift
  local i

  set +e
  for ((i = 0; i < attempts; i++)); do
    $@
    if [ "$?" -eq 0 ]; then
      set -e
      return 0
    fi
    sleep $delay
  done

  set -e
  echo "Command \"$@\" failed $attempts times. Output: $?"
  false
}

function egress_iface_mtu() {

    # Identify default egress iface.
    local egress_iface=$(ip route show | awk '/default via/ {print $5}')
    if [ ! -z "${egress_iface}" ]; then
	echo ${default_mtu}
	return
    fi

    # Obtain mtu value associated to egress interface, and return it
    # if this one is lower than default value.
    local egress_mtu=$(ip link show ${egress_iface} | awk '/mtu / {print $5}')
    if [ ! -z "${egress_mtu}" ] && [ "${egress_mtu}" -lt 1500 ]; then
	echo ${egress_mtu}
    else
	echo ${default_mtu}
    fi
}


#
# Execution starts here ...
#

# Build & install sysbox
thisHost=$(hostname)

# Build cookie (to build from scratch when necessary only)
if [[ ! -f .buildinfo ]]; then
  touch .buildinfo
  chown rootless:rootless .buildinfo
fi

lastBuildHost=$(cat .buildinfo)
if [[ "$lastBuildHost" != "$thisHost" ]]; then
  make clean
fi

# Configure dockerd
mkdir -p "${dockerCfgDir}"

if [ -z "$SHIFT_UIDS" ]; then
    cat <<EOF > "${dockerCfgFile}"
{
    "debug": false,
    "userns-remap": "sysbox",
    "runtimes": {
        "sysbox-runc": {
            "path": "/usr/local/sbin/sysbox-runc"
        }
    },
    "default-runtime": "sysbox-runc",
    "bip": "172.24.0.1/16",
    "default-address-pools": [
        {
            "base": "172.31.0.0/16",
            "size": 24
        }
    ]
}
EOF
else
    cat <<EOF > "${dockerCfgFile}"
{
    "debug": false,
    "userns-remap": "",
    "runtimes": {
        "sysbox-runc": {
            "path": "/usr/local/sbin/sysbox-runc",
            "runtimeArgs": [
                "--no-kernel-check"
            ]
        }
    },
    "default-runtime": "sysbox-runc",
    "bip": "172.24.0.1/16",
    "default-address-pools": [
        {
            "base": "172.31.0.0/16",
            "size": 24
        }
    ]
}
EOF
fi

# Adjust docker's interface mtu configuration. This is required to avoid forwarding issues
# in containers seating behind an egress-interface with lower-than-default mtu.
egress_mtu=$(egress_iface_mtu)
if [ ${egress_mtu} -ne ${default_mtu} ]; then
    jq --arg mtu ${egress_mtu} --indent 4 '. + {"mtu": $mtu}' "${dockerCfgFile}" \
       > ${tmpfile} && cp ${tmpfile} "${dockerCfgFile}"
fi

# Start docker
dockerd > /var/log/dockerd.log 2>&1 &
retry 10 0.5 docker ps > /dev/null 2>&1

# Build sysbox suite.
make sysbox-local --no-print-directory && make install

# Inside the test container we start sysbox with a dedicated script
# that sets some test-specific configs
echo "Starting sysbox with test-specific options"
install -D -m0755 tests/scr/sysbox /usr/local/sbin/sysbox
sysbox
