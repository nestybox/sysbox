#!/bin/bash -e

#
# script to run sysbox integration tests for continous-integration purposes
#

progName=$(basename "$0")

usage()
{
	echo "
Usage: $progName <testName>

"
	exit 1
}

# argument testName is optional
if [ $# -eq 1 ]; then
	printf "\nExecuting $1 ... \n"
	bats --tap $1
else
	printf "\nExecuting sysbox-mgr tests ... \n"
	bats --tap tests/sysmgr
	printf "\nExecuting sysbox-fs tests ... \n"
	bats --tap tests/sysfs
	printf "\nExecuting docker tests ... \n"
	bats --tap tests/docker
	printf "\nExecuting dind tests ... \n"
	bats --tap tests/dind
	printf "\nExecuting cind tests ... \n"
	bats --tap tests/cind
	printf "\nExecuting app tests (l1) ... \n"
	bats --tap tests/apps/l1
	printf "\nExecuting chown syscall tests ... \n"
	bats --tap tests/syscall/chown
	printf "\nExecuting basic mount syscall-interception tests ... \n"
	bats --tap tests/syscall/mount/mount.bats
	printf "\nExecuting mount syscall-interception tests for procfs resources ... \n"
	bats --tap tests/syscall/mount/mount-procfs.bats
	printf "\nExecuting mount syscall-interception tests for sysfs resources ... \n"
	bats --tap tests/syscall/mount/mount-sysfs.bats
	printf "\nExecuting mount syscall-interception tests for overlayfs resources ... \n"
	bats --tap tests/syscall/mount/mount-overlayfs.bats
	printf "\nExecuting mount syscall-interception tests for immutable resources ... \n"
	bats --tap tests/syscall/mount/mount-immutables.bats

	# the kind tests need plenty storage (otherwise kubelet fails);
	# remove all docker images from prior tests to make room, and
	# remove all docker images after test too.
	printf "\n"
	docker system prune -a -f
	printf "\nExecuting kind tests ... \n"
	bats --tap tests/kind/kindbox-custom-net.bats
	docker system prune -a -f

	# sysbox-pods tests
	docker system prune -a -f
	printf "\nExecuting sysbox-pod tests ... \n"
	bats --tap tests/pods
	crictl rmi --all

	printf "\nSysbox health checking ...\n"
	bats --tap tests/health/sysbox-health.bats

	docker system prune -a -f
fi

exit 0
