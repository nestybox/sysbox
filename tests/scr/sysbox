#!/bin/bash -e

#
# Launch sysbox inside the test container
#

# Retry a command $1 times until it succeeds. Wait $2 seconds between retries.
# (copied from runc/tests/integration/helpers.bash)
function retry() {
  local attempts=$1
  shift
  local delay=$1
  shift
  local i

  set +e
  for ((i = 0; i < attempts; i++)); do
    $@
    if [ "$?" -eq 0 ]; then
        set -e
	return 0
    fi
    sleep $delay
  done

  set -e
  echo "Command \"$@\" failed $attempts times. Output: $?"
  false
}

# Increase default inotify resources to meet sys container demands.
sysctl -w fs.inotify.max_queued_events=1048576
sysctl -w fs.inotify.max_user_watches=1048576
sysctl -w fs.inotify.max_user_instances=1048576

# Increase default keyring resources to meet sys container demands.
# For a k8s cluster:
# keys = 35 + (workers * 23) + (2 * pods)
sysctl -w kernel.keys.maxkeys=20000

sleep 1

# start sysbox-mgr
sysbox-mgr --log /dev/stdout > /var/log/sysbox-mgr.log 2>&1 &
retry 10 1 grep -q Ready /var/log/sysbox-mgr.log

# start sysbox-fs
#
# Note: inside the test container we must ignore sysbox-fs handler
# errors when accessing procfs and sysfs, because some procfs and
# sysfs resources are not writeable from within the test container
# (see sysbox issue #538).
mkdir -p /var/lib/sysboxfs
sysbox-fs --ignore-handler-errors --log /dev/stdout > /var/log/sysbox-fs.log 2>&1 &
retry 10 1 grep -q Initiating /var/log/sysbox-fs.log

exit 0
