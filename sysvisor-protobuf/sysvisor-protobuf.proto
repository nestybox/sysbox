//
// File hosting Sysvisorfs/runC Protobuffer Definitions.
//
// The following instructions should be followed prior to executing/generating
// any gRPC code. Notice that this file serves as a protobuffer template to
// generate code to be utilized in both runC and sysvisorfs modules, so its
// presence is expected in both git repos. Eventually, we will find a better
// packaging strategy so that a single file is maintained in Inception's repos.
// For the time being, please make sure that this file is kept fully in-sync
// in both runC and Sysvisorfs git modules.
//
// This file is currently present in these two paths:
//
// runC path:        inception/vendor/runc/sysvisorProtobuf/sysvisorfs.proto
// sysvisorfs path:  inception/sysvisor/sysvisor-fs/sysvisorfs/sysvisorProtobuf/sysvisorfs.proto
//
//
// gRPC/protobuffer installation instructions:
//
// 1) Install gRPC package:
//
// $ go get -u google.golang.org/grpc
//
//
// 2) Install the protoc compiler that is used to generate gRPC service code.
//
// $ mkdir -p ~/bin/protoc
// $ cd ~/bin/protoc
// $ wget https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protoc-3.6.1-linux-x86_64.zip
// $ unzip protoc-3.6.1-linux-x86_64.zip
// $ sudo cp -r include/* /usr/local/include/
// $ sudo cp bin/protoc /usr/local/bin/
// $ sudo chmod 755 /usr/local/bin/protoc         [ providing execution rights to all users ]
// $ sudo chmod -R 755 /usr/local/include/google  [ providing execution rights to all users ]
//
// temporary folder ~/bin/protoc can be now eliminated if desired:
// $ rm -rf ~/bin/protoc
//
//
// 3) Install protoc plugin for golang
//
// $ go get -u github.com/golang/protobuf/protoc-gen-go
//
// Make sure that PATH is properly set to cover $GOPATH/bin/:
//
// $ export PATH=$PATH:$GOPATH/bin
//
// 4) Execute protobuf compiler to auto-generate gRPC code/logic. See examples below
//    for both runC and Sysvisorfs ends.
//
// Example 1: sysvisor-runc end (client side)
//
// rodny@deepblue-vm-1:~/go/src/github.com/opencontainers/runc$
// protoc -I=$GOPATH/src/github.com/nestybox/sysvisor/sysvisor-protobuf/ --go_out=plugins=grpc:libsysvisor/sysvisor_protobuf sysvisor_protobuf.proto
//
// Example 2: sysvisor-fs end (server side)
//
// rodny@deepblue-vm-1:~/go/src/github.com/nestybox/sysvisor/sysvisor-fs$
// protoc -I=$GOPATH/src/github.com/nestybox/sysvisor/sysvisor-protobuf --go_out=plugins=grpc:sysvisor_protobuf sysvisor_protobuf.proto


syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.sysvisor.sysvisor_protobuf";
option java_outer_classname = "sysvisor_protobuf";

import "google/protobuf/timestamp.proto";

package sysvisor_protobuf;


// ContainerRegistration/Unregistration service definition.
service ContainerStateChannel {

    // Generates a container-registration message
    rpc ContainerRegistration (ContainerData) returns (Response) {}

    // Generates a container-unregistration message
    rpc ContainerUnregistration (ContainerData) returns (Response) {}

    // Generates a container-update message
    rpc ContainerUpdate (ContainerData) returns (Response) {}
}

//
// Request message sent by runC to sysvisorfs process during container
// registration, unregistration and update phases.
//
message ContainerData {
  string Id                       = 1;
  int32 InitPid                   = 2;
  string Hostname                 = 3;
  google.protobuf.Timestamp Ctime = 4;
  int32 UidFirst                  = 5;
  int32 UidSize                   = 6;
  int32 GidFirst                  = 7;
  int32 GidSize                   = 8;
}

// Response message sent from sysvisorfs to runC process.
message Response {
  bool Success = 1;
}
