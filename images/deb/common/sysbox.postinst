#!/bin/bash
#
# Copyright: (C) 2019 Nestybox Inc.  All rights reserved.
#

set -e

# Source debconf library.
. /usr/share/debconf/confmodule

# Dockerd default configuration dir/file.
dockerCfgDir="/etc/docker"
dockerCfgFile="${dockerCfgDir}/daemon.json"

# sysbox-fs' default mountpoint path.
sysboxfs_mountpoint="/var/lib/sysboxfs"

# Shiftfs' minimum (oldest) Ubuntu kernel supported.
shiftfs_min_supported_kernel="5.0.0.21"


# Compare two versions in SemVer format.
#
# Examples:  (1.0.1, 1.0.1) = 0
#            (1.0.1, 1.0.2) = 2
#            (1.0.1, 1.0.0) = 1
#            (1, 1.0) = 0
#            (3.0.4.10, 3.0.4.2) = 1
#            (5.0.0-11, 5.0.0-9) = 2
#
version_compare() {

    if [[ $1 == $2 ]]
    then
        return 0
    fi

    # Define delimiter as both "." and "-" to cover all version formats.
    local IFS=".-"
    local i ver1=($1) ver2=($2)

    # Fill empty fields in ver1 with zeros.
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done

    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # Fill empty fields in ver2 with zeros.
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done

    return 0
}

# Creates sysbox-fs mountpoint.
create_sysboxfs_mountpoint() {

    if [[ -d ${sysboxfs_mountpoint} ]]; then
        return
    fi

    mkdir -p ${sysboxfs_mountpoint}
    if [[ ! -d ${sysboxfs_mountpoint} ]]; then
        exit 1
    fi
}

# Enables the utilization of unprivileged user-namespaces.
enable_unprivileged_userns() {

    val=$(sysctl kernel.unprivileged_userns_clone)
    if [[ "${val##* }" = 0 ]]; then
        sysctl -w kernel.unprivileged_userns_clone=1 2>/dev/null
    fi
}

# Adds user/group in charge of running all sysbox components.
add_sysbox_user() {

    if ! getent passwd | grep "^sysbox:" >/dev/null 2>&1; then
        useradd -r -s /bin/false sysbox
    fi
}

# Create/Modify dockerd configuration to satisfy Sysbox's requirements.
#
# There are two operation-modes that dictate the presence/absence of
# a 'userns-remap' entry in dockerd's config file:
#
# 1) uid-shifting mode: In this case no 'userns-remap' entry is required in
#    dockerd's configuration.
# 2) regular mode: In this mode a 'userns-remap' entry is required by making
#    use of the 'sysbox' uid.
#
# Regardless of the oper-mode being elected, dockerd config file must be always
# updated to introduce the sysbox-runc runtime.
adjust_docker_config() {

    local uid_shift_mode=false
    local docker_restart_required=false
    local docker_sighup_required=false

    # Determine the operational mode [ 1) or 2) ] based on the kernel version
    # being utilized.
    local cur_kernel=$(uname -r | cut -d'-' -f1-2)
    version_compare ${cur_kernel} ${shiftfs_min_supported_kernel} && :
    if [[ $? -le 1 ]]; then
        uid_shift_mode=true
    fi

    # If no dockerd default config-file exist, or if there's no content on it,
    # create one with a bare json layout.
    if [[ ! -f ${dockerCfgFile} ]] || [[ ! -s ${dockerCfgFile} ]]; then
        mkdir -p ${dockerCfgDir}
        touch ${dockerCfgFile}
        echo -e "{\n}" > ${dockerCfgFile}
    fi

    # Consider adding a 'userns-remap' entry only if uid-shift-mode is turned
    # off.
    if [[ ${uid_shift_mode} = false ]]; then
        # If no 'userns-remap' key-entry is present, or if its associated value
        # is empty, proceed to create a key and set its value to 'sysbox' user.
        # Note that 'jq' does not provide 'in-place' editing capabilities (i.e.
        # it displays inconsistent behavior), hence the need for the auxiliar
        # 'tmp' file.
        if [[ $(jq 'has("userns-remap")' ${dockerCfgFile}) = false ]] ||
            [[ $(jq '."userns-remap"' ${dockerCfgFile}) = "\"\"" ]]; then

            jq --indent 4 '. + {"userns-remap": "sysbox"}' \
                ${dockerCfgFile} > tmp.json && mv tmp.json ${dockerCfgFile}

            docker_restart_required=true
        fi

    else
        # If uid_shift_mode is enabled verify that no 'userns-remap' entry exists
        # for 'sysbox' user, and if that's the case, proceed to eliminate it.
        if [[ $(jq 'has("userns-remap")' ${dockerCfgFile}) = true ]] &&
            [[ $(jq '."userns-remap"' ${dockerCfgFile}) = "\"sysbox\"" ]]; then

            jq 'del(."userns-remap")' \
                ${dockerCfgFile} > tmp.json && mv tmp.json ${dockerCfgFile}
            # Also a valid approach, leaving it here in case it's needed in the
            # future.
            # jq --indent 4 '. + {"userns-remap": ""}' \
            #    ${dockerCfgFile} > tmp.json && mv tmp.json ${dockerCfgFile}

            docker_restart_required=true
        fi
    fi

    # If no 'runtimes' key-entry is present, proceed to add one.
    if [[ $(jq 'has("runtimes")' ${dockerCfgFile}) = false ]]; then
        jq --indent 4 '. + {"runtimes": {"sysbox-runc": {"path": "/usr/local/sbin/sysbox-runc"}}}' \
            ${dockerCfgFile} > tmp.json && mv tmp.json ${dockerCfgFile}

        docker_sighup_required=true

    # If no 'sysbox-runc' runtime entry is present, proceed to add it.
    elif [[ $(jq '.runtimes | has("sysbox-runc")' ${dockerCfgFile}) = false ]]; then
        jq --indent 4 '.runtimes |= . + {"sysbox-runc": {"path": "/usr/local/sbin/sysbox-runc"}}' \
            ${dockerCfgFile} > tmp.json && mv tmp.json ${dockerCfgFile}

        docker_sighup_required=true
    fi

    # Skip all docker-related processing if this one is not installed.
    if ! dpkg -s docker-ce >/dev/null 2>&1; then
        return
    fi

    # Restart dockerd if config changes cannot be processed on-the-fly. Note
    # that this action may impact the existing containers (unless dockerd is
    # running with 'live-restore' feature enabled). On the other hand, if no
    # disruptive changes have been made to config, simply send a sighup to
    # dockerd to have its config-file being re-parsed.
    if [[ ${docker_restart_required} = true ]]; then

        # Depending on the user's responses to (debconf) questions formulated at
        # pre-installation time, we will either inform user of the need to restart
        # dockerd, or we will automatically do it as part of this installation
        # process.
        db_get sysbox/docker_restart
        if [ "$RET" = "false" ]; then
            db_input critical sysbox/docker_manual_restart || true
            db_stop
            echo -e "\nDisruptive changes made to dockerd configuration. Please restart docker service!"
        else
            echo -e "\nDisruptive changes made to docker configuration. Restarting docker service..."
            systemctl restart docker
        fi

    elif [[ ${docker_sighup_required} = true ]]; then
        echo -e "\nNon-disruptive changes made to docker configuration. Sending SIGHUP signal to docker daemon...\n"
	    kill -SIGHUP $(pidof dockerd)
    fi
}

config_sysbox() {

    # Ensure sysbox-fs' default mountpoint is created in the file-system.
    create_sysboxfs_mountpoint

    # Allows user-namespaces creation for unprivileged users. This change will
    # persist through system reboots by relying on a sysctl.d config-file to be
    # generated as part of this package's installation process.
    enable_unprivileged_userns

	# Add 'sysbox' user to host a large pool of subordinate UIDs/GIDs to be
    # shared across all system-containers. This user must match the one defined
    # in the docker configuration file.
    add_sysbox_user

    # Adjust dockerd configuration.
    adjust_docker_config
}


case "$1" in
    configure)
        # Adjust system's configuration to satisfy Sysbox requirements.
        config_sysbox

        # Avoid calling exit() here to allow debhelper tools to add their
        # auto-generated code further below.
        ;;

    abort-*)
        ;;

    *)
        ;;
esac

#DEBHELPER#
