// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/ads/googleads/v0/errors/field_mask_error.proto

package errors // import "google.golang.org/genproto/googleapis/ads/googleads/v0/errors"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Enum describing possible field mask errors.
type FieldMaskErrorEnum_FieldMaskError int32

const (
	// Enum unspecified.
	FieldMaskErrorEnum_UNSPECIFIED FieldMaskErrorEnum_FieldMaskError = 0
	// The received error code is not known in this version.
	FieldMaskErrorEnum_UNKNOWN FieldMaskErrorEnum_FieldMaskError = 1
	// The field mask must be provided for update operations.
	FieldMaskErrorEnum_FIELD_MASK_MISSING FieldMaskErrorEnum_FieldMaskError = 5
	// The field mask must be empty for create and remove operations.
	FieldMaskErrorEnum_FIELD_MASK_NOT_ALLOWED FieldMaskErrorEnum_FieldMaskError = 4
	// The field mask contained an invalid field.
	FieldMaskErrorEnum_FIELD_NOT_FOUND FieldMaskErrorEnum_FieldMaskError = 2
	// The field mask updated a field with subfields. Fields with subfields may
	// be cleared, but not updated. To fix this, the field mask should select
	// all the subfields of the invalid field.
	FieldMaskErrorEnum_FIELD_HAS_SUBFIELDS FieldMaskErrorEnum_FieldMaskError = 3
)

var FieldMaskErrorEnum_FieldMaskError_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "UNKNOWN",
	5: "FIELD_MASK_MISSING",
	4: "FIELD_MASK_NOT_ALLOWED",
	2: "FIELD_NOT_FOUND",
	3: "FIELD_HAS_SUBFIELDS",
}
var FieldMaskErrorEnum_FieldMaskError_value = map[string]int32{
	"UNSPECIFIED":            0,
	"UNKNOWN":                1,
	"FIELD_MASK_MISSING":     5,
	"FIELD_MASK_NOT_ALLOWED": 4,
	"FIELD_NOT_FOUND":        2,
	"FIELD_HAS_SUBFIELDS":    3,
}

func (x FieldMaskErrorEnum_FieldMaskError) String() string {
	return proto.EnumName(FieldMaskErrorEnum_FieldMaskError_name, int32(x))
}
func (FieldMaskErrorEnum_FieldMaskError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_field_mask_error_6d7662fd786fde5a, []int{0, 0}
}

// Container for enum describing possible field mask errors.
type FieldMaskErrorEnum struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FieldMaskErrorEnum) Reset()         { *m = FieldMaskErrorEnum{} }
func (m *FieldMaskErrorEnum) String() string { return proto.CompactTextString(m) }
func (*FieldMaskErrorEnum) ProtoMessage()    {}
func (*FieldMaskErrorEnum) Descriptor() ([]byte, []int) {
	return fileDescriptor_field_mask_error_6d7662fd786fde5a, []int{0}
}
func (m *FieldMaskErrorEnum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldMaskErrorEnum.Unmarshal(m, b)
}
func (m *FieldMaskErrorEnum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldMaskErrorEnum.Marshal(b, m, deterministic)
}
func (dst *FieldMaskErrorEnum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldMaskErrorEnum.Merge(dst, src)
}
func (m *FieldMaskErrorEnum) XXX_Size() int {
	return xxx_messageInfo_FieldMaskErrorEnum.Size(m)
}
func (m *FieldMaskErrorEnum) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldMaskErrorEnum.DiscardUnknown(m)
}

var xxx_messageInfo_FieldMaskErrorEnum proto.InternalMessageInfo

func init() {
	proto.RegisterType((*FieldMaskErrorEnum)(nil), "google.ads.googleads.v0.errors.FieldMaskErrorEnum")
	proto.RegisterEnum("google.ads.googleads.v0.errors.FieldMaskErrorEnum_FieldMaskError", FieldMaskErrorEnum_FieldMaskError_name, FieldMaskErrorEnum_FieldMaskError_value)
}

func init() {
	proto.RegisterFile("google/ads/googleads/v0/errors/field_mask_error.proto", fileDescriptor_field_mask_error_6d7662fd786fde5a)
}

var fileDescriptor_field_mask_error_6d7662fd786fde5a = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xdd, 0x4a, 0xc3, 0x30,
	0x1c, 0xc5, 0x6d, 0xe7, 0x07, 0x64, 0xe0, 0x4a, 0x06, 0x13, 0xbc, 0xd8, 0x45, 0x1f, 0x20, 0x2d,
	0x88, 0x37, 0xf1, 0x2a, 0xb3, 0xed, 0x2c, 0xdb, 0xd2, 0x41, 0xec, 0x06, 0x52, 0x28, 0xd5, 0xd4,
	0x30, 0xf6, 0x91, 0xd1, 0xe8, 0x9e, 0xc3, 0x67, 0xf0, 0x46, 0xf0, 0x51, 0x7c, 0x14, 0x2f, 0x7c,
	0x06, 0x49, 0xe3, 0x86, 0xbb, 0xd0, 0xab, 0x9c, 0xfc, 0x72, 0x4e, 0xf2, 0xcf, 0x01, 0x97, 0x42,
	0x4a, 0xb1, 0x28, 0xbd, 0x82, 0x2b, 0xcf, 0x48, 0xad, 0x36, 0xbe, 0x57, 0x56, 0x95, 0xac, 0x94,
	0xf7, 0x38, 0x2b, 0x17, 0x3c, 0x5f, 0x16, 0x6a, 0x9e, 0xd7, 0x04, 0xad, 0x2b, 0xf9, 0x24, 0x61,
	0xd7, 0x78, 0x51, 0xc1, 0x15, 0xda, 0xc5, 0xd0, 0xc6, 0x47, 0x26, 0xe6, 0xbe, 0x59, 0x00, 0x46,
	0x3a, 0x3a, 0x2a, 0xd4, 0x3c, 0xd4, 0x2c, 0x5c, 0x3d, 0x2f, 0xdd, 0x17, 0x0b, 0x9c, 0xee, 0x63,
	0xd8, 0x02, 0xcd, 0x94, 0xb2, 0x71, 0x78, 0x1d, 0x47, 0x71, 0x18, 0x38, 0x07, 0xb0, 0x09, 0x4e,
	0x52, 0x3a, 0xa0, 0xc9, 0x94, 0x3a, 0x16, 0xec, 0x00, 0x18, 0xc5, 0xe1, 0x30, 0xc8, 0x47, 0x84,
	0x0d, 0xf2, 0x51, 0xcc, 0x58, 0x4c, 0xfb, 0xce, 0x11, 0x3c, 0x07, 0x9d, 0x5f, 0x9c, 0x26, 0xb7,
	0x39, 0x19, 0x0e, 0x93, 0x69, 0x18, 0x38, 0x87, 0xb0, 0x0d, 0x5a, 0xe6, 0x4c, 0xe3, 0x28, 0x49,
	0x69, 0xe0, 0xd8, 0xf0, 0x0c, 0xb4, 0x0d, 0xbc, 0x21, 0x2c, 0x67, 0x69, 0xaf, 0xde, 0x30, 0xa7,
	0xd1, 0xfb, 0xb2, 0x80, 0xfb, 0x20, 0x97, 0xe8, 0xff, 0x0f, 0xf5, 0xda, 0xfb, 0x63, 0x8f, 0x75,
	0x0b, 0x63, 0xeb, 0x2e, 0xf8, 0x89, 0x09, 0xb9, 0x28, 0x56, 0x02, 0xc9, 0x4a, 0x78, 0xa2, 0x5c,
	0xd5, 0x1d, 0x6d, 0xeb, 0x5c, 0xcf, 0xd4, 0x5f, 0xed, 0x5e, 0x99, 0xe5, 0xd5, 0x6e, 0xf4, 0x09,
	0x79, 0xb7, 0xbb, 0x7d, 0x73, 0x19, 0xe1, 0x0a, 0x19, 0xa9, 0xd5, 0xc4, 0x47, 0xf5, 0x93, 0xea,
	0x63, 0x6b, 0xc8, 0x08, 0x57, 0xd9, 0xce, 0x90, 0x4d, 0xfc, 0xcc, 0x18, 0x3e, 0x6d, 0xd7, 0x50,
	0x8c, 0x09, 0x57, 0x18, 0xef, 0x2c, 0x18, 0x4f, 0x7c, 0x8c, 0x8d, 0xe9, 0xfe, 0xb8, 0x9e, 0xee,
	0xe2, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x36, 0x27, 0xda, 0x98, 0xfa, 0x01, 0x00, 0x00,
}
