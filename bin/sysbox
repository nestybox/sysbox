#!/bin/bash

#
# Launch Sysbox (requires root privileges)
#
# Note: normally Sysbox is installed via a distro-specific package
# which sets up the Sysbox systemd units. This script is meant as a
# quick alternative to the installer to help launch Sysbox manually
# (e.g., for testing).
#

# Retry a command $1 times until it succeeds. Wait $2 seconds between retries.
# (copied from runc/tests/integration/helpers.bash)
function retry() {
  local attempts=$1
  shift
  local delay=$1
  shift
  local i

  for ((i = 0; i < attempts; i++)); do
    $@
    if [ "$?" -eq 0 ]; then
	return 0
    fi
    sleep $delay
  done

  echo "Command \"$@\" failed $attempts times. Output: $?"
  false
}

# Increase default inotify resources to meet sys container's demands.
sysctl -w fs.inotify.max_queued_events=1048576
sysctl -w fs.inotify.max_user_watches=1048576
sysctl -w fs.inotify.max_user_instances=1048576

# Increase default keyring resources to meet sys container demands.
# For a k8s cluster:
# keys = 35 + (workers * 23) + (2 * pods)
sysctl -w kernel.keys.maxkeys=20000

#
# Start Sysbox components
#
mkdir -p /var/lib/sysboxfs
sysbox-mgr --log /dev/stdout > /var/log/sysbox-mgr.log 2>&1 &
retry 5 1 grep -q Ready /var/log/sysbox-mgr.log

sysbox-fs --log /dev/stdout > /var/log/sysbox-fs.log 2>&1 &
retry 5 1 grep -q Initiating /var/log/sysbox-fs.log
